// 1. instalar o prisma -> npm install prisma --save-dev 
// 2. instalar o client do prisma -> npm install @prisma/client
// 3. inicializar o prisma no projeto -> npx prisma init

// COMO GERAR O CLIENTE: npx prisma generate --schema prisma/schema.prisma
// CRIAR BANCO DO ZERO OU ATUALIZAR ESTRUTURA COM HISTÓRICO: npx prisma migrate dev --schema prisma/schema.prisma
// ATUALIZAR BANCO RÁPIDO: npx prisma db push


generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Transactions {
  id              Int      @id @default(autoincrement())
  id_payments     Int      @unique // fk de payments
  id_nft_mints    Int      @unique // fk de nft_mints
  xrpl_id         Int
  type            String   @db.VarChar(20)
  hash            String   @unique @db.Char(64) // hash da transação
  ledger_index    Int
  close_time      DateTime @db.Timestamp(3)
  validated       Int      @db.TinyInt
  result_code     String   @db.VarChar(20)
  fee             BigInt
  account         String   @db.VarChar(35) // address remetente
  sequence        BigInt
  last_ledger_seq BigInt?
  flags           BigInt?
  ledger_hash     String?  @db.Char(64)
  ctid            String?  @db.VarChar(32)

  // Criando relacionamento
  payments Payments[] 
  nft_mints NftMints[]

  @@map("transactions")
}

model Payments {
  id               Int    @id
  destinations     String @db.VarChar(35) //address destinatário
  deliver_max      BigInt
  delivered_amount String @db.VarChar(45)

  // id referencia id_payments em Transactions
  fk_transactions_to_payments Transactions @relation(fields: [id], references: [id_payments])

  @@map("payments")
}

model NftMints {
  id    Int    @id
  uri   String
  taxon Int

  // id referencia id_nft_mints em Transactions
  fk_transactions_to_nft_mints Transactions @relation(fields: [id], references: [id_nft_mints])

  @@map("nft_mints")
}
